template:
  name: Publish to Pypi or TestPypi
  identifier: Publish_to_Pypi_or_TestPypi
  versionLabel: "1"
  type: Stage
  projectIdentifier: airflowproviderdatarobot
  orgIdentifier: AGENTS
  tags: {}
  spec:
    type: CI
    spec:
      cloneCodebase: true
      caching:
        enabled: false
        paths: []
      buildIntelligence:
        enabled: true
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: account.cigeneral
          namespace: harness-delegate-ng
          automountServiceAccountToken: true
          nodeSelector: {}
          os: Linux
      execution:
        steps:
          - step:
              type: Run
              name: PyPi Publish
              identifier: PyPi_Publish
              spec:
                connectorRef: account.dockerhub_datarobot_read
                image: python:3.12
                shell: Bash
                command: |-
                  #!/bin/bash

                  configure_git() {
                      echo "configuring git"
                      cat <<EOF > ${HOME}/.netrc
                  machine ${DRONE_NETRC_MACHINE}
                  login ${DRONE_NETRC_USERNAME}
                  password ${DRONE_NETRC_PASSWORD}
                  EOF
                  }

                  set_build_variables() {
                      export SETUPTOOLS_SCM_PRETEND_VERSION='<+trigger.tag>'
                      BUILD_TYPE='<+stage.variables.BUILD_TYPE>'
                      REPO_URL='https://test.pypi.org/legacy/'
                      UPLOAD_SECRET='<+secrets.getValue("testpypi_token")>'
                      VERSION=$(python3 setup.py --version)

                      if [ "$BUILD_TYPE" == "pypi" ]; then
                          REPO_URL='https://upload.pypi.org/legacy/'
                          UPLOAD_SECRET='<+secrets.getValue("PyPI_token_for_airflow-provider-datarobot")>'
                      fi
                  }

                  build_and_upload() {
                      echo "[BUILD PACKAGE]"
                      make build-release

                      echo "[TWINE CHECK]"
                      twine check dist/*

                      echo "[TWINE UPLOAD]"
                      twine upload \
                          --verbose \
                          --repository-url "$REPO_URL" \
                          --username '__token__' \
                          --password "$UPLOAD_SECRET" \
                          dist/*
                  }

                  push_tags() {
                      if [ "$BUILD_TYPE" == "pypi" ]; then
                          echo '[PUSHING RELEASE TAGS]'
                          git tag -f release && git push -f origin release
                      fi
                  }

                  main() {
                      configure_git
                      pip3 install --no-cache-dir --upgrade pip setuptools wheel six twine
                      set_build_variables
                      build_and_upload
                      push_tags
                  }

                  main "$@"
