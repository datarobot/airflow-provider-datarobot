from datarobot.models.modeljob import ModelJob


class ModelJobGetOperator(BaseOperator):
    """Fetches one ModelJob. If the job finished, raises PendingJobFinished exception.

    :param project_id: The identifier of the project the model belongs to
    :type project_id: str
    :param model_job_id: The identifier of the model_job
    :type model_job_id: str
    :return: model_job
    :rtype ModelJob
    """

    template_fields: Sequence[str] = ["project_id", "model_job_id"]
    template_fields_renderers: dict[str, str] = {}
    template_ext: Sequence[str] = ()
    ui_color = "#f4a460"

    def __init__(
        self,
        *,
        project_id: str = None,
        model_job_id: str = None,
        datarobot_conn_id: str = "datarobot_default",
        **kwargs: Any
    ) -> None:
        super().__init__(**kwargs)
        self.project_id = project_id
        self.model_job_id = model_job_id
        self.datarobot_conn_id = datarobot_conn_id

    def execute(self, context: Context) -> str:
        # Initialize DataRobot client
        DataRobotHook(datarobot_conn_id=self.datarobot_conn_id).run()

        if self.project_id is None:
            raise ValueError("project_id is required for ModelJob.")
        if self.model_job_id is None:
            raise ValueError("model_job_id is required for ModelJob.")

        result = datarobot.models.modeljob.ModelJob.get(
            self.project_id,
            self.model_job_id,
        )
        return result.id
